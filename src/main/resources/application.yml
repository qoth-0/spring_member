# application.properties의 형식

#server.port=8081
#spring.datasource.url=jdbc:mariadb://localhost:3306/member
#spring.datasource.username=root
#spring.datasource.password=1234

# application.yml의 형식

#server:
#  port: 8081
#
spring:
#  profiles:
#    active: dev # 개발용으로 사용
  #    Controller와 jsp사용 시에 경로와 확장자 설정
  #    기본설정이 타임리프이므로, 티임리프 의존성 제거해야 jsp사용 가능
#  mvc:
#    view:
#      prefix: /WEB-INF/views/
#      suffix: .jsp
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3306/basic
    username: root
    password: 1234
  jpa:
    database: mysql
#    innoDB 엔진 사용 설정
    database-platform: org.hibernate.dialect.MariaDBDialect
#    테이블은 자동생성, 스키마는 사전생성 필요
    generate-ddl: true
    hibernate:
#      create옵션은 매번 table을 drop후 생성
#      update욥션은 변경사항만 alter 적용 - 컬럼
#      validate는 실제 DB와의 차이만을 check
#      실무에서는 update또는 validate사용
      ddl-auto: update
#    jpa가 자동으로 쿼리를 실행할 때, 쿼리가 console창에 보여지도록
    show_sql: true
#    springboot 2.4 이상에서는 기본적으로 PathPatternParser를 사용하고 있는데
#    이는 이전 버전과 다른 경로매칭 규칙을 갖고있어, springfox와 같은 일부 라이브러리에서는 문제 발생
#    url : localhost:8080/swagger-ui/
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
#    mybatis의 mapper파일 경로 명시
mybatis:
  mapper-locations: classpath:/mapper/**/*.xml



#--- # 설정 구분
#server:
#  port: 8081
#
#spring:
#  profiles:
#    active: prod # 운영용으로 사용
#  datasource:
#    url: jdbc:mariadb://localhost:3306/member
#    username: root
#    password: 1234
