plugins { // 사용 버전
	id 'java'
	id 'org.springframework.boot' version '2.7.11' // boot 버전
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.encore'
version = '0.0.1-SNAPSHOT' // 빌드된 jar(실행할 수 있도록 만든 java 압축파일)파일의 버전명

java {
	sourceCompatibility = '11'
}

repositories {
	// 의존성(라이브러리)를 가져오는 대상 repository(저장소)
	// 내부망에 구축되어 있는 프로젝트의 경우 nexus와 같은 라이브러리를 사용하여 내부망 repository사용
	// maven { url "http://nexus.XXXXX.com:8081/nexus/content/groups/public/" }
	mavenCentral()
}
// starter 종속성은 별도의 버전관리 필요없음 - 알아서 java, boot버전과 호환성을 맞춰줌)
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // 타임리프 관련 의존성
	implementation 'org.springframework.boot:spring-boot-starter-web' // 스프링 mvc(model, view, controller)구조의 web서비스 관련 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test' // 테스트를 위한 의존성
//	롬복(Getter, Setter 및 로그 관련 어노테이션) 추가
	compileOnly 'org.projectlombok:lombok' // 컴파일 시점에서 추가
	annotationProcessor 'org.projectlombok:lombok'
//	DB연결을 위한 의존성 : jdbc, mariadb 클라이언트
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.mariadb.jdbc:mariadb-java-client'
// 	Spring data jpa 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
}
// 테스트 라이브러리로 주로 JUnit 사용
tasks.named('test') {
	useJUnitPlatform()
}
